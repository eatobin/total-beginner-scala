scala> import spray.json._
import spray.json._

scala> import DefaultJsonProtocol._
import DefaultJsonProtocol._

scala> val source = """{ "some": "JSON source" }"""
source: String = { "some": "JSON source" }

scala> val jsonAst = source.parseJson
jsonAst: spray.json.JsValue = {"some":"JSON source"}

scala> val json = jsonAst.prettyPrint
json: String =
{
  "some": "JSON source"
}

scala> val jsonAst = List(1, 2, 3).toJson
jsonAst: spray.json.JsValue = [1,2,3]

scala> val myObject = jsonAst.convertTo[List[Int]]
myObject: List[Int] = List(1, 2, 3)

scala> val jsonAst = List(Symbol("j"), Symbol("k")).toJson
jsonAst: spray.json.JsValue = ["j","k"]

scala> val myObject = jsonAst.convertTo[List[Symbol]]
myObject: List[Symbol] = List('j, 'k)

case class Color(name: String, red: Int, green: Int, blue: Int)

object MyJsonProtocol extends DefaultJsonProtocol {
  implicit val colorFormat = jsonFormat4(Color)
}

import MyJsonProtocol._
import spray.json._

val json = Color("CadetBlue", 95, 158, 160).toJson
val color = json.convertTo[Color]
